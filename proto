#!/usr/bin/perl -w
use strict;
$| = 1; # flush after every print

use Archive::Extract;
use Cwd;             # to return to the original directory after a chdir
use File::Path;
use File::Spec;
use LWP::UserAgent;

#---------------------------- main program -----------------------------
# The old proto used to keep its data local, the new one is global.
my ($config_file, $state_file) = get_config_file();
my ( $config_info, $commentinfo ) = load_config_file($config_file);
make_directories( $config_info->{'Perl 6 library'},
    $config_info->{'Parrot build directory'},
    $config_info->{'Rakudo build directory'},
    $config_info->{'Proto projects cache'}
);
create_default_state_file( $state_file ) unless ( -f $state_file );
my $perl6 = $config_info->{'Perl 6 executable'};
install_perl6( $config_info ) unless -x $perl6;
make_pir_modules( $perl6, $config_info->{'Perl 6 library'} );
exec( "$perl6 installer @ARGV" ); # Delegate to installer

#---------------------------- install_perl6 ----------------------------
sub install_perl6 {
    my ($config_info) = @_;
    my $silently = ' > /dev/null 2>&1'; # probably not Win32 compatible
    print "proto is installing Rakudo Perl 6.\n";
    download_parrot( $config_info );
    build_parrot(    $config_info );
    download_rakudo( $config_info );
    build_rakudo(    $config_info );
    # Perform a minimal check that the installation succeeded
    my $perl6 = $config_info->{'Perl 6 executable'};
    unless ( -x $perl6 ) {
        die "proto was unable to install Rakudo Perl 6 :-(\n";
    }
    my $rakudo_version = qx{$perl6 -v};
    unless ( $rakudo_version =~ m/^This compiler is built with the Parrot Compiler Toolkit, parrot revision \d{5}$/ ) {
        die "rakudo error: $rakudo_version";
    }
    print "Rakudo Perl 6 has been installed.\n";
}

#--------------------------- download_parrot ---------------------------
sub download_parrot {
    my ($config_info) = @_;
    my $parrot_build_dir = $config_info->{'Parrot build directory'};
    $parrot_build_dir = make_short_path( $parrot_build_dir );
    my $parrot_version = $config_info->{'Parrot version'};
    if ( $parrot_version =~ m/\d+\.\d+\.\d+/x ) {
        # a tested release
        my $parrot_tarfile = "parrot-$parrot_version.tar.gz";
        my $filename = File::Spec->catfile(
            $parrot_build_dir,
            $parrot_tarfile
        );
        # check whether a download has already been done, skip if ok
        if ( -f $filename ) {
            my $filesize = -s ( $filename );
            print "$parrot_tarfile is already downloaded ($filesize bytes)\n";
        }
        else {
            print "proto is downloading $parrot_tarfile...\n";
            my $ua = LWP::UserAgent -> new;
            $ua->show_progress( 1 );
            my $url = "http://ftp.parrot.org/releases/devel/$parrot_version/$parrot_tarfile";
            my $response = $ua->mirror( $url, $filename );
            $response->is_success or die "cannot download $url";
            print "downloaded.\n";
        }
        # check whether an extract has already been done, skip if ok
        #my $parrot_build_dir = $config_info->{'Parrot build directory'};
        my $parrot_version_file = File::Spec->catfile( $parrot_build_dir,
            "parrot-$parrot_version", "VERSION" );
        if ( -f $parrot_version_file ) {
            print "Parrot source code was already extracted\n";
        }
        else {
            print "extracting $filename...\n";
            my $ae = Archive::Extract->new( archive => $filename );
            $ae->extract( to => $parrot_build_dir )
                or die "cannot extract from archive";
        }
    }
    elsif ( $parrot_version =~ m/ ^ \d{5,6} $ /x or $parrot_version eq 'HEAD' ) {
        # use Subversion to checkout a Parrot revision such as 45370
        print "proto is checking out Parrot $parrot_version...";
        # TODO: detect if Subversion missing, and install.
        my $svn_version = qx{svn --version};
        $svn_version =~ s/^svn.*?([0-9.]+).*/subversion $1/s;   # huge re-format
        # or install from http://subversion.apache.org/packages.html#windows
        my $revision_option = " --revision $parrot_version";
        print "proto is checking out Parrot $parrot_version...";
        my $command = "svn checkout$revision_option https://svn.parrot.org/parrot/trunk $parrot_build_dir";
        print "\ncommand = $command\n";
        if ( system( $command ) != 0 ) {
            die "subversion checkout of Parrot failed";
        }
    }
    else {
        die "The Parrot version is $parrot_version" .
            " but should be 'HEAD' or a number such as '2.2.0'";
    }
    # TODO: verify the download and die noisily if it seems wrong
    print "parrot download done\n";
}

#---------------------------- build_parrot -----------------------------
sub build_parrot {
    my ($config_info) = @_;
    my $cwd = Cwd->getcwd();
    my $parrot_build_dir   = $config_info->{'Parrot build directory'};
    my $parrot_install_dir = $config_info->{'Parrot install directory'};
    my $parrot_version     = $config_info->{'Parrot version'};
    print "proto is building Parrot...";
    if ( $parrot_version =~ m/\d+\.\d+\.\d+/x ) {
        $parrot_build_dir = File::Spec->catdir( 
            $parrot_build_dir,
            "parrot-$parrot_version"
        );
    }
    elsif ( $parrot_version =~ m/ ^ \d{5,6} $ /x ) {
        ;
    }
    elsif ( $parrot_version eq 'trunk' ) {
        ;
    }
    else {
        die "The Parrot version is $parrot_version" .
            " but should be 'trunk' or a number such as '2.2.0'";
    }
    chdir $parrot_build_dir or die "cannot chdir";
    unless ( -f 'Makefile' ) {
#        my $version = $config_info->{'Parrot version'};
        my $prefix  = $config_info->{'Parrot install directory'};
        $prefix = make_short_path( $prefix );
        my @parrot_options = ( "--prefix=\"$prefix\"" );
        if ( $^O ne "MSWin32" ) {
            push @parrot_options, "--optimize";  # or does this also work on Windows now?
        }
        my $command = "$^X Configure.pl @parrot_options";
        # run Parrot's Configure.pl
        print "build_parrot Configure command = $command\n";
        system( $command );
    }
    # run Parrot's make
    my $make = make_utility(); # find out whether 'make' or 'mingw32-make' is installed
    my $command = "$make install";
    system( $command );
    chdir $cwd;
    # TODO: run a 'parrot --version' and verify the correct output, die noisily if wrong
    print "building Parrot done\n";
}

#--------------------------- download_rakudo ---------------------------
sub download_rakudo {
    my ( $config_info ) = @_;
    my $rakudo_build_dir = $config_info->{'Rakudo build directory'};
    my $rakudo_version = $config_info->{'Rakudo version'};
#   print "proto is downloading Rakudo $rakudo_version...\n";
    # XXX Maybe check if rakudo dir has contents instead?
#    return if -d $rakudo_build_dir;
    if ( $rakudo_version =~ m/ \d{4}\.\d{2} /x ) {
        my $rakudo_release_tarfile = "rakudo-$rakudo_version.tar.gz";
        my $filename = File::Spec->catfile(
            $rakudo_build_dir,
            $rakudo_release_tarfile
        );
        if ( -f $filename ) {
            my $filesize = -s ( $filename );
            print "$rakudo_release_tarfile already downloaded ($filesize bytes)\n";
        }
        else {
            print "proto is downloading a $rakudo_release_tarfile...\n";
            my $ua = LWP::UserAgent -> new;
            $ua->show_progress( 1 );
            my $url = "http://cloud.github.com/downloads/rakudo/rakudo/$rakudo_release_tarfile";
            print "filename = $filename\n";
            $ua->mirror( $url, $filename );
        }
        my $ae = Archive::Extract->new( archive => $filename );
        $ae->extract( to => $rakudo_build_dir )
            or die "cannot extract from archive";
    }
    elsif ($rakudo_version eq 'bleeding') {
        if ( -d $rakudo_build_dir ) {
            if ( system("$^X -MExtUtils::Command -e rm_rf $rakudo_build_dir") != 0 ) {
                die "Couldn't remove $rakudo_build_dir";
            }
        }
        my $command = 'git clone git://github.com/rakudo/rakudo.git '.
            $rakudo_build_dir;
        print "\ncommand = $command\n";
        if ( system( $command ) != 0 ) {
            die "Downloading Rakudo using git clone failed";
        }

=pod

        if ( $rakudo_build_dir =~ m{ (.*) / \w+ $}x ) {
            print 'Downloading Rakudo Perl 6...';
            my $parent_dir = $1;
            if ( ! -d $parent_dir ) {
                mkpath($parent_dir) or die "Couldn't create $parent_dir";
            }
            if ( -d $rakudo_build_dir ) {
                rmtree($rakudo_build_dir) or die "Couldn't remove $rakudo_build_dir";
            }
            my $command = 'git clone git://github.com/rakudo/rakudo.git'
                      . " $rakudo_build_dir"
                      . $silently;
            system( $command ) == 0 or die "\nCouldn't check out Rakudo: $?";
        }
        else {
            die "Something went wrong while downloading rakudo";
        }

=cut

    }
    else {
        die "Rakudo version was neither 'bleeding' nor a number like '2010.02'";
    }

    print "[ Rakudo download ok  ]\n";
}

#---------------------------- build_rakudo -----------------------------
sub build_rakudo {
    my ($config_info) = @_;
    my $rakudo_build_dir = $config_info->{'Rakudo build directory'};
    if ( $config_info->{'Rakudo version'} =~ m/ \d{4}\.\d{2} /x ) {
        # versions like '2010.02' are release tarballs
        $rakudo_build_dir = File::Spec->catdir(
            $rakudo_build_dir,
            "rakudo-$config_info->{'Rakudo version'}"
        );
    }
    elsif ($config_info->{'Rakudo version'} eq 'bleeding') {
        # use git to clone the latest source
        my $git_version = qx{git --version};
        # TODO: detect if git is missing, and install if needed
        $git_version =~ s/(git )version ([0-9.]+)\n/$1$2/;    # little re-format
    }
    else {
        die "Rakudo version was neither 'bleeding' nor a number like '2010.02'";
    }
    if ( ! -f "$rakudo_build_dir/perl6" ) {
        print "Building Rakudo in $rakudo_build_dir...";
        my $cwd = Cwd->getcwd();
        chdir $rakudo_build_dir or die "cannot chdir";
        my $parrot_config = File::Spec->catfile(
            $config_info->{'Parrot install directory'},
            'bin',
            'parrot_config'
        );
        $parrot_config = make_short_path( $parrot_config );
        my @rakudo_options = (
            "--parrot-config=\"$parrot_config\""
        );
        my $command = "$^X Configure.pl @rakudo_options";
        print "Rakudo Configure command = $command\n";
        system( $command );
        my $make = make_utility(); # find out whether 'make' or 'mingw32-make' is installed
        $command = "$make install";
        system( $command );
        print "\nBuilding Rakudo done\n";
        chdir $cwd;

=pod

        my $flags = '--gen-parrot';
        my $command
            = "(cd $rakudo_build_dir && perl Configure.pl $flags "
              . '&& make install)'
              . ' 2>&1 | ./dotty-progress "Building Perl 6" 3579';
        if ( system($command) != 0 ) {
            print "[ FAIL ]\n";
            if ( system("grep memory make.log $silently") == 0 ) {
                die "Not enough memory to build Perl 6.\n";
            }
            die "Couldn't build Perl 6: $?";
        }
        -f "$rakudo_build_dir/perl6"
            or die "[ FAIL ]\nCouldn't build Perl 6.\n";
        unlink('make.log');
        print "[  ok  ]\n";

=cut

    }
}

#-------------------------- make_pir_modules ---------------------------
sub make_pir_modules {
    # Copy the modules of proto itself from the local lib directory to
    # ~/.perl6/lib, and then compile to .pir format.
    # TODO: multiple versions of the Ecosystem and Installer modules
    my ($perl6exe, $perl6libdir) = @_;
    my $displayed_building = 0;
    # Be sure the destination directory exists
    unless ( -d $perl6libdir ) {
        warn "making $perl6libdir";
        system( "perl -MExtUtils::Command -e mkdir $perl6libdir" );
    }
    # Precompile these modules to PIR
    for my $name ( 'Ecosystem', 'Installer' ) {
        # If it is newer or has not been copied, copy "$name.pm" from
        # "lib/" to "$perl6libdir/".
        # -M is script start time minus file modification time, in days.
        if ( ! -f "$perl6libdir/$name.pm" || -M "lib/$name.pm" < -M "$perl6libdir/$name.pm" ) {
            unless ( $displayed_building ) {
                print "Building proto..."; $displayed_building = 1;
            }
            # warn "copying $name to $perl6libdir\n";
            system( "perl -MExtUtils::Command -e cp lib/$name.pm $perl6libdir" );
            # Maybe the main proto script (written in Perl 5) would have
            # been able to load the ExtUtils::Command module anyway, and
            # could have done the mkdir and cp commands internally...
            # Such usage is not documented.
        }
        if ( ! -f "$perl6libdir/$name.pir" || -M "$perl6libdir/$name.pm" < -M "$perl6libdir/$name.pir" || -M $perl6 < -M "$perl6libdir/$name.pir" ) {
            unless ( $displayed_building ) {
                print "Building proto..."; $displayed_building = 1;
            }
            # warn "compiling $perl6libdir/$name.pir\n";
            system( "$perl6 --target=pir --output=$perl6libdir/$name.pir $perl6libdir/$name.pm" );
        }
    }
    if ( $displayed_building ) {
        print "done\n";
    }
}

#---------------------------- make_utility -----------------------------
sub make_utility {
    my @commands = qw< make mingw32-make >;
    my $make_utility;
    for ( @commands ) {
        if ( system( "$_ --version" ) == 0 ) {
            $make_utility = $_;
            last;
        }
    }
    return $make_utility;
}

#--------------------------- make_directories --------------------------
sub make_directories {
    # Create all the directories that do not yet exist
    for my $path ( @_ ) {
        # skip all the inner work if $path already exists
        unless ( -d $path ) {
            # it would be nice to use File::Path->make_path here, but in
            # Windows the directory .perl6 makes it say "invalid path"
            my ( $volume, $directories, $file ) = File::Spec->splitpath( $path, 1 );
            my @dirs = File::Spec->splitdir( $directories );
            # Because this uses mkdir, it must verify or create the
            # directories one by one.
            for my $depth ( 0 .. $#dirs ) {
                my $subpath = File::Spec->catdir( @dirs[0..$depth] );
                my $subdir = File::Spec->catpath( $volume, $subpath, '' );
                unless ( -d $subdir ) {
                    print "Making $subdir\n";
                    if ( ( mkdir $subdir ) == 0 ) {
                        die "Cannot create directory $path";
                    }
                }
            }
        }
    }
}

#--------------------------- make_short_path ---------------------------
# BUG: the Parrot "$make install" target used below, runs
# 'perl tools/dev/install_files.pl' and passes a series of parameters
# that are separated by spaces.  The parameters should be quoted in case
# they contain spaces, but they are not.
# The result is that Windows XP users, whose home directories are
# typically "C:\Documents and Settings\Username", end up with the
# non existent directory name "C:\Documents" being passed, followed by
# the bare words "and" and "Settings".  The result is a failure to
# install Parrot.
# Parrot has these tickets to work on the problem:
#     http://trac.parrot.org/parrot/ticket/930
#     http://trac.parrot.org/parrot/ticket/888
# NOTE: attempting to bypass Parrot's Makefile, and run install_files.pl
# directly, also results in the same or similar problems.  Therefore the
# unquoted arguments are being passed lower down the Parrot toolchain.
# WORKAROUND: use the MSDOS short name instead, eg C:\DOCUME~1
# Of course on non-Windows platforms this is a useless waste of time.
sub make_short_path {
    my ($path) = @_;
    if ( $^O eq 'MSWin32' and index($path, ' ') >= 0 ) {
        # Warning: possibly unreliable code, depending on your Windows setup
        my ($volume, $directories, $file) = File::Spec->splitpath( $path, 1 );
        my @dirs = File::Spec->splitdir( $directories );
        for ( my $i=0; $i<$#dirs; $i++ ) {
            if ( index($dirs[$i], ' ') >= 0 ) {
                # this oversimplification is definitely wrong on a
                # small minority of Windows systems, but mberends--
                # cannot be bothered to do it properly.
                my $shortname = uc(substr($dirs[$i],0,6)) . '~1';
                # for example, it's not always ~1 :/
                $dirs[$i] = $shortname;
            }
        }
        $directories = File::Spec->catdir( @dirs );
        $path = File::Spec->catpath($volume, $directories, '' );
        print "shortened $path to eliminate spaces\n";
    }
    return $path;
}

=pod

#--------------------------- legacy_projects ---------------------------
sub legacy_projects {
    my ( $config_info ) = @_;
    my @legacy_projects;
    my $project_dir = $config_info->{'Proto projects directory'};
    open PROJECTS_LIST, '<', 'projects.list' or die "cannot open projects list";
    while ( defined( my $line = <PROJECTS_LIST> ) ) {
        if ( $line =~ m/ ^ (\S+) : $ /x ) {
            my $project = $1;
            if ( -d "$project_dir/$project" and $project ne 'proto' ) {
                push @legacy_projects, $project;
            }
        }
    }
    close PROJECTS_LIST;
    return @legacy_projects;
}

=cut

#--------------------- create_default_config_file ----------------------
sub get_config_file {
    # removed File::HomeDir dependency because it is not a core module
    my $home_path = $^O eq 'MSWin32'
        ? $ENV{'HOMEDRIVE'} . $ENV{'HOMEPATH'}
        : $ENV{'HOME'};
    my ( $home_vol, $home_dir ) = File::Spec->splitpath( $home_path, 1 );
    my $perl6basedir = File::Spec->catpath( $home_vol, $home_dir, '.perl6' );
    my $config_file = File::Spec->catfile( $perl6basedir, 'proto', 'proto.conf' );
    my $state_file =  File::Spec->catfile( $perl6basedir, 'proto', 'projects.state' );
    if ( ! -e $config_file ) {
        create_default_config_file($config_file);
        my $config_info = load_config_file($config_file);
        die <<"PROTO_CONFIG_MESSAGE";

*** CONFIG FILE CREATED ***

Greetings!  I have made a configuration file that you may want to review
called '$config_file'.
Next time you run $0
these settings will be used to bootstrap your Perl 6 software ecosystem.

If you're new to this, or reluctant to do configuration, you probably want
the default settings anyway. The most important ones are:
Perl 6 library         -> $config_info->{'Perl 6 library'}
Perl 6 executable      -> $config_info->{'Perl 6 executable'}

PROTO_CONFIG_MESSAGE
    }

    # So, continue here if there was an existing config.proto file
    if ( ! -r $config_file ) {
        die "The file $config_file exists but is not readable. Cannot continue.\n";
    }
    return ($config_file, $state_file);
}

#--------------------- create_default_config_file ----------------------
sub create_default_config_file {
    my ($proto_config_file) = @_;
    # Derive all the other directories and filenames from
    # $proto_config_file (usually ~/.perl6/proto/proto.conf).
    my ($home_vol, $proto_path, $config_file) = File::Spec->splitpath( $proto_config_file );
    my @proto_dirs = File::Spec->splitdir( $proto_path );
    pop @proto_dirs if ( $proto_dirs[$#proto_dirs] eq '' ); # useless
    my @perl6_dirs = @proto_dirs[0 .. $#proto_dirs-1];
    my $perl6_dir = File::Spec->catdir( @perl6_dirs );
    my $perl6_lib_path = File::Spec->catpath( $home_vol, $perl6_dir, 'lib' );
    my $proto_cache_dir = File::Spec->catdir( @proto_dirs );
    my $proto_cache_path = File::Spec->catpath( $home_vol, $proto_cache_dir, 'cache' );
    # create directories if they do not yet exist
    make_directories( $perl6_lib_path, $proto_cache_path );
    my $rakudo_build_dir = File::Spec->catpath( $home_vol, $perl6_dir, 'rakudo' );
    my $parrot_build_dir = File::Spec->catpath( $home_vol, $perl6_dir, 'parrot' );
    my $parrot_install_dir = File::Spec->catpath( $home_vol, $perl6_dir, 'parrot_install' );
    my @proto_cache_dirs = ( @proto_dirs, 'cache' );
    my $projects_cache_dir = File::Spec->catpath( $home_vol, File::Spec->catdir(@proto_dirs), 'cache' );

    my $perl6exe;
    if ( exists( $ENV{PERL6EXE} ) ) { # if you know what you're doing
        $perl6exe = $ENV{PERL6EXE};
    }
    else { # default: install rakudo in ~/.perl6/parrot_install/bin
        my $parrot_install_bin_dir = File::Spec->catdir( @perl6_dirs, 'parrot_install', 'bin' );
        $perl6exe = File::Spec->catpath( $home_vol, $parrot_install_bin_dir, 'perl6' );
    }

    my $config_info = {
        'proto.conf version'       => '2010-04-01',
        'Rakudo version'           => 'bleeding',
        'Parrot version'           => '45370',
        'Proto projects cache'     => $projects_cache_dir,
        'Rakudo build directory'   => $rakudo_build_dir,
        'Parrot build directory'   => $parrot_build_dir,
        'Parrot install directory' => $parrot_install_dir,
        'Perl 6 executable'        => $perl6exe,
        'Perl 6 library'           => $perl6_lib_path,
        'Test when building'       => 'no',
        'Test failure policy'      => 'die',
        'Perl 6 project developer' => 'no',
    };
    my  $commentinfo = {
        '/' => [ 'proto.conf -- created by proto',
                 'The file consists of a number of settings written as',
                 'key/value pairs. You are welcome -- encouraged, even -- to',
                 'edit the file manually, but please stick to a list of',
                 'key/value pairs.' ],
        'config.proto version'
            => [ 'config.proto version -- the version number of this file.',
                 'proto uses it to determine whether the file needs to be',
                 'upgraded to a newer version. The value should never need',
                 'to be edited manually.' ],
        'Proto projects cache'
            => [ 'Proto projects cache -- the base directory in which each project',
                 'gets its own download directory' ],
        'Rakudo build directory'
            => [ 'Rakudo build directory -- Rakudo source is compiled here. ' ],
        'Rakudo version'
            => [ "Rakudo version -- either 'bleeding' or a number such as '2010.02'" ],
        'Parrot build directory'
            => [ 'Parrot build directory -- Parrot source is compiled here. ' ],
        'Parrot version'
            => [ "Parrot version -- either 'HEAD' or a number such as '2.2.0'" ],
        'Perl 6 executable'
            => [ 'Perl 6 executable -- how to run perl6. ' ],
        'Perl 6 library'
            => [ 'Perl 6 library -- the path to a directory, which will be created',
                 'if it does not exist, which will contain the projects installed',
                 'by proto. If you set this to a different path after projects',
                 'have already been installed, be aware that the old projects',
                 'will have to be moved along if proto is to find them' ],
        # TODO: Implement downloading of specific releases.
        'Rakudo revision'
            => [ 'Rakudo revision -- the revision of Rakudo Perl 6 to',
                 'download, if no such revision was found in $RAKUDO_DIR or',
                 'other likely locations at startup. Allowed values are',
                 '"bleeding", "release", and a hexadecimal integer of length',
                 'up to 40. The value "bleeding" means to download the latest',
                 'Rakudo Perl 6 revision from github, whereas "release" means',
                 'to download the latest release as a tarball.' ],
        'Test when building'
            => [ 'Test when building -- when building projects that were just',
                 'downloaded or updated, whether to also run the test suites',
                 'of those projects. This option only controls whether the',
                 'tests are actually run; the "Test failure policy"',
                 'determines whether or not to halt the build process on',
                 'a failing test suite. Values other than "yes" are treated',
                 'as "no".' ],
        'Test failure policy'
            => [ 'Test failure policy -- what to do when tests fail in the',
                 'test suites of projects that are being installed. Note that',
                 'this option has no effect unless the option "Test when',
                 'building" has been set to "yes". The value "die" of this',
                 'option means that the build process halts whenever a test',
                 'suite fails. Other values are treated as "keep going".' ],
        'Perl 6 project developer'
            => [ 'Perl 6 project developer -- when set, this option makes',
                 'proto try to download read-write versions of project',
                 'repositories, from which project development can be',
                 'carried out. If such a download fails, proto falls back to',
                 'downloading the project the usual way.' ],
    };
    save_config_file($proto_config_file, $config_info, $commentinfo )
        or die "Couldn't create $proto_config_file: $!\n";
}

#---------------------- create_default_state_file ----------------------
sub create_default_state_file {
    my ($file_name, @project_names ) = @_;
    my $project_dir = $config_info->{'Proto projects directory'};
    open PROJECTS_STATE, ">", $file_name or die "cannot create $file_name: $!";
    for my $project_name (@project_names) {
        my $path = "$project_dir/$project_name";
        print PROJECTS_STATE join "\n",
            "$project_name:",
            '    state: legacy',
            "    old-location: $path",
            '',
            '';
    }
    close PROJECTS_STATE;
}

#-------------------------- load_config_file ---------------------------
sub load_config_file {
    my ( $filename ) = @_;
    my $settings = {};
    my $comments = {};
    my @collected_comments = ();
    open my $YAML_FILE, '<', $filename
        or die "cannot open $filename for read: $!";
    my $doc_sep_line = qr/^---/;
    my $comment_line = qr/\#(.*)$/;
    my $setting_line = qr/(.*):\s+(.*)/;
    while ( my $line = <$YAML_FILE> ) {
        chomp $line;
        if ( $line =~ $doc_sep_line ) {
            $comments->{'/'} = [ @collected_comments ];
            @collected_comments = ();
        }
        elsif ( $line =~ $comment_line ) {
            push @collected_comments, $1;
        }
        elsif ( $line =~ $setting_line ) {
            $settings->{$1} = $2;
            $comments->{$1} = [ @collected_comments ];
            @collected_comments = ();
        }
    }
    close $YAML_FILE;
    return wantarray ? ( $settings, $comments ) : $settings;
}

#-------------------------- save_config_file ---------------------------
sub save_config_file {
    my ( $filename, $settings, $comments ) = @_;
    if ( not defined $comments ) { $comments = { }; }
    open my $YAML_FILE, '>', $filename
        or die "cannot open $filename for write: $!";
    my $main_comments = $comments->{'/'};
    if ( defined $main_comments ) {
        for my $comment ( @$main_comments ) {
            print {$YAML_FILE} "# $comment\n";
        }
    }
    print {$YAML_FILE} "--- \n";
    for my $settingname ( sort keys %$settings ) {
        print {$YAML_FILE} "\n";
        my $setting_comments = $comments->{$settingname};
        if ( defined $setting_comments ) {
            for my $comment ( @$setting_comments ) {
                print {$YAML_FILE} "# $comment\n";
            }
        }
        print {$YAML_FILE} "$settingname: ", ${$settings}{$settingname}, "\n";
    }
    close $YAML_FILE;
}

__DATA__

=pod

=head1 NAME

proto - download and install Parrot, Rakudo, and Perl 6 projects

=head1 OVERVIEW

The C<proto> command is a Perl 5 script that installs Rakudo Perl 6 and
Parrot if they are not already installed. It then hands over to the
Perl 6 C<Installer> script to download, test and install your choice of
Perl 6 projects.

The C<Installer> script

=head1 TOOLCHAIN

Perl 5, a make utility and a C compiler are all you really need.  Proto
starts in Perl 5 and uses some of its modules to download and extract
Parrot and Rakudo source code archive files.  Unix-ish systems generally
have these already installed, if not there is usually a package manager
that can provide them.

On Windows the most popular options are Strawberry Perl (which includes
everything you need, and can download CPAN modules too) and ActiveState
Perl (which recently added a Gnu C compiler as an option, and has its
own package manager).  Some Windows based developers prefer the
Microsoft C++ compiler, from http://www.microsoft.com/express/downloads/.

The proto developers are striving to install and run Rakudo Perl 6 with
whatever operating system, Perl 5 distribution and compiler toolchain
you use.  Please visit #perl6 to discuss you experiences.

=head1 ENVIRONMENT

PERL6EXE - if exported by the shell, specifies where to look for an
installed Perl 6 executable. Not required if your shell executes 'perl6'
anyway.  The setting is saved as 'Perl 6 executable' in config.proto.
It is configured automatically if you let proto install Rakudo (and
Parrot).  For example, to use perl6.pbc instead of the fakecutable use
something like:

    PERL6EXE=/my/parrot_install/bin/parrot \
        /my/parrot_install/lib/<version>/languages/perl6/perl6.pbc \
        ./proto

=head1 ROADMAP

The current proto roadmap responds to the Rakudo * initiative, its
nql-rx refactor and the related S11 Modules proposal
(github.com/rakudo/rakudo/blob/master/docs/S11-Modules-proposal.pod).

Rakudo * release needs only a subset of these proto roadmap goals.
The rest are desirable enhancements.

The previous proto roadmap was called 'installed-modules', and is still
included below for planning reference, but not necessarily to guide
implementation.

1.  Fixing.  Make proto work with the latest master Rakudo, formerly
    known as the 'ng' branch.  There were a few regressions switching
    over.  Problems are being handled by working around in proto,
    commenting the fixes as WORKAROUND, and reporting them in #perl6.
    This approach leaves a TODO item here, to find WORKAROUND comments,
    handle them better, or notify http://rt.perl.org/rt3 by mailing
    rakudobug@perl.org.

2.  Releases.  The default for a novice user will be to download the
    most recent stable tarballs for Rakudo and Parrot.  Proto can do
    that using only core modules, and without requiring installation
    of subversion or git software.  It does mean that proto needs to be
    updated with new default version numbers as soon as possible after
    each Rakudo release.  Rakudo developers can change to downloading
    the latest Rakudo and Parrot versions by editing proto.conf.

3.  Directories.  The user may override anything, but default to all
    subdirectories of ~/.perl6, as follows:

        git               for fetching Rakudo if needed
        lib               root of the Perl 6 module hierarchy
        parrot            main Parrot download/build directory
            parrot-x.y.z  source directory of a specific Parrot version
        parrot_install    parrot virtual machine runtime base
            bin           for parrot executables, eg perl6.pbc
        proto             keep proto.conf and projects.state here
            cache         where projects are downloaded and tested
        rakudo            Rakudo download/build directory
        svn               for fetching parrot if needed

    By making the parrot, parrot_install and rakudo directories not nest
    in each other, there is more flexibility for customization.  If a
    user prefers the directory nesting done by Rakudo's --gen-parrot
    option, proto can work with that too.

    To be Windows compatible, proto will use Perl 5 modules such as
    File::Spec and File::Path to handle all directory and file names,
    and LWP::UserAgent and Archive::Extract to process the archive files.

4.  Modules.  Also put project.state and config.proto in the
    ~/.perl6/proto directory.  Modules installed by proto keep working
    even if proto is removed.  Thus proto can be replaced and phased out.

5.  Runtime.  Build in ~/.perl6/parrot and ~/.perl6/rakudo, install the
    binaries in ~/.perl6/parrot_install and then remove the build dirs.
    Let the user edit config.proto to override the directory paths and
    turn off source tree removal.  Make it easy to install multiple
    implementations side by side, for example Rakudo on Parrot, Rakudo
    on Common Language Infrastructure, Pugs, Mildew etc.  Treat them as
    special projects that can be installed, updated or removed.

6.  Updating.  Re-install proto, Rakudo and Parrot from newer release
    downloads if the user chooses, and if the date suggests they should
    be available.

7.  Versioning.  Implement the librarian functions of the S11 Modules
    proposal.  Details to be worked out.

8.  Cheese speleology: remember http://use.perl.org/~masak/journal/39583
    and implement it.  Easier said than done, but now is the very best
    time to start.  Details to be worked out.

=head1 TODO

1.  The new Rakudo master is not backwards compatible with the alpha
    branch, so rip out the old legacy project support.

2.  For Windows compatibility, change all hard coded mkdir and cp
    commands to use the Perl 5's L<ExtUtils::Command> with C<-e mkpath>
    and C<-e cp> instead.

3.  The install command will need to be able specify :auth<> and :ver<>
    and look them up in projects.list.

4.  Advise the user to either 1) point the system path to
    installed_modules/bin, or 2) add a symbolic link in a system path
    directory to the perl6 fakecutable.

5.  Also put the proto executable
    in the bin directory and enable it to be run independent of the
    current working directory.

99. Reduce all WORKAROUND comments to simple cases in rakudobug reports
    and replace the comments with TODO items linked to RT numbers.

=head1 Rakudo/alpha old TODO list (partly deprecated)

The installed-modules branch plans to improve proto by doing the following:

1.  Place all installed Perl 6 modules (.pm and .pir files) into one
    folder hierarchy. Rakudo now preloads @*INC with $HOME/.perl6lib,
    followed by <parrot_install>/lib/<version/languages/perl6/lib, the
    directories in PERL6LIB, and lastly '.' (the current directory).
    Add a "Perl 6 library" setting to config.proto, with $HOME/.perl6/lib
    as default value.
    [DONE]

2.  Keep a separate cache directory per project for all processing prior
    to installation. Allow the cache directory to be cleaned or removed
    without affecting the installed module.
    Add a "Proto cache directory" to config.proto with a default value
    of <proto_base>/cache.
    [DONE]

3.  Add a projects.state file to register installed projects.
    The format of projects.state is similar to projects.list, currently
    with a C<state> field whose value may be 'legacy', 'built', 'tested'
    (meaning passed *all* tests in the cache directory) or 'installed'.
    Route all access to projects.state information via the Ecosystem class.
    [DONE]

4.  Rename the existing "fetch" submethod to "download", "install" ->
    "fetch", "update" -> "refresh" and "uninstall" -> "clean".
    Rename Ecosystem::is-installed() to Ecosystem::is_fetched().
    [DONE]

5.  Factor out the code common in the existing "install" and "update"
    methods, or unify them and add a new/existing flag. Either way, stop
    the repetition because we need to edit this part significantly.
    [DONE]

6.  Replace the 'Parrot directory' and 'Rakudo directory' settings with
    'Perl 6 executable' in config.proto.
    [DONE]

7.  Make install_perl6 implement L<http://www.rakudo.org/how-to-get-rakudo>,
    including the new 'make install' step.
    [DONE]

8.  Use the shiny new %*ENV for passing environment variables to child
    processes.
    [DONE]

9.  Add a new "install" step to the end of the existing "fetch,
    configure, build, test" workflow, to copy module files to the
    "Perl 6 library" tree.
    To install modules into the global library tree, first look for an
    an 'install' target in the Makefile, run it if found.
    If there is no 'install', check that all the files in lib/ can be
    copied without clobbering, then either proceed to copy or abort.
    [DONE]

10. Drop the migration plan for existing installations: laziness++ ;)
    Just warn the user as long as the old config.proto has not been
    upgraded, and record as "state: legacy: /path" in projects.state.
    This must be overwritten if the user later re-installs the project.
    [DONE]

11. Add a showstate command to report on the state of all fetched or
    installed projects.
    [DONE]

12. Handle "uninstall" by Makefile or by listing all the names in
    $project/lib and deleting each same named file in "Perl 6 library".
    Also remove the project name from projects.installed and delete the
    project cache directory. Think "realclean".
    We could keep the cache, but a "rm -rf" and a new fetch is cleaner.
    [PARTDONE]

13. Add a new "update" command. To be fail-safe, cache the project's
    downloaded cache (yes, cache the cache) by copying everything into
    another directory called cache/$project.temp. Refresh the normal
    cache. Determine whether there are any differences and back out
    politely if nothing changed. Build and test the updated project in
    the refreshed cache directory. If it passes, rename the cache
    directory to cache/$project.new and rename the cache/$project.temp
    to just cache/$project, and uninstall the old version of the project.
    Discard the old project cache and rename the .new back. Install.

14. Ensure robustness of the workflow, so that an error in fetching,
    building or testing any dependency, stops the dependent module
    being installed. Refactor the existing code to do this very
    concisely in the top level methods.

15. Validate @*INC by exiting with a friendly explanation if @*INC does
    not contain the 'Perl 6 library' directory. List the possible fixes:
    edit config.proto (set Perl 6 library), or any one of
    ~/.bash_profile, ~/.bash_login, or ~/.profile (set PERL6LIB).
    Make this behaviour optional with a 'Validate Perl 6 library' option
    in config.proto.

16. Update create-new-project to support install, update and uninstall
    in its Makefile. Document it as a guideline for module developers.
    This facility is new to proto, so it is also new to all projects.
    The 'make' utility will need to know where to find 'Perl 6 library',
    so do this: %*ENV<PERL6LIB> = %!config-info{'Perl 6 library'}.

17. When loading projects.list also load a projects.local if it exists.
    The projects.local file allows individual projects to be handled by
    proto without causing git conflicts on projects.list.

18. ...keep planning and doing...

19. Build a test suite for proto itself, with the possibility of partial
    testing offline. With acceptable test coverage, proto will be safer
    to develop and use until other infrastructure tools usurp it.
    Use a test version of config.proto that points to test directories,
    so that the main installation is not affected.
    For even better testing, consider testing proto inside a chroot jail
    to prevent bugs from damaging things. Building the jail may be a bit
    complicated though, think it through first.
    [OPTIONAL]

20. Improve the usage message and provide help per command.

21. Make 'test' (of a project) show details of failures. Also add a
    'test all' suitable for "Cheese speleology".
    [OPTIONAL]

22. Refactor into MVC form. Details to be determined. Some ideas:
    Model is currently only Ecosystem (metadata). It should also include
    handling files and directories in the proto/cache/ and the
    'Perl 6 library' tree, perhaps within a separate module.
    View is the part of Installer.pm that deals with lists of projects,
    commands and other user I/O.
    Controller is the part of Installer.pm that er, controls flow, but
    it should leave the actual updating of projects, files and state to
    Model.
    [OPTIONAL]

23. Emulate Debian's 'popularity-contest' for package usage statistics,
    based on anonymous submission via smtp or http.
    [OPTIONAL]

=cut
