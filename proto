#!/usr/bin/perl -w
use strict;

use YAML::Syck;

my $config_file = 'config.proto';
if ( !-e $config_file ) {
    create_default_config_file($config_file);
    die <<"EOMESSAGE";
Greetings. I have created a file '$config_file' that you may want to review.
When you feel ready, run '$0' again, and we'll get down to business.
EOMESSAGE
}
if ( !-r $config_file ) {
    die "The file $config_file exists but is not readable. Cannot continue.\n";
}
my $config_info = LoadFile($config_file);

# This bootstrapping script assumes as little as possible about the user's
# setup. It tries to establish, one after another, the following things:
#
# 1. That perl and git are installed
# 2. That $PARROT_DIR is set.
# 3. That $PARROT_DIR points to a directory containing Parrot.
# 4. That it contains a 'parrot' executable.
# 5. That the $RAKUDO_DIR directory exists.
# 6. That it contains a 'perl6.pbc' file.

use strict;
++$|; # flush after every print

# 1. perl git and subversion installed
my $git_version = qx{git --version};
my $svn_version = qx{svn --version};

# TODO: detect if either of these is missing, and install them.
$git_version =~ s/(git )version ([0-9.]+)\n/$1$2/;    # little re-format
$svn_version =~ s/^svn.*?([0-9.]+).*/subversion $1/s;   # huge re-format

# 2. PARROT_DIR
defined (my $parrot_dir = $config_info->{'Parrot directory'})
    or die "Can't proceed if the Parrot directory is not set.";

my $silently = ' > /dev/null 2>&1';

# 3. Parrot download
my $parrot_version;
my $rakudo_dir = $config_info->{'Rakudo directory'};
while ( !($parrot_version = parrot_version($parrot_dir)) )
{
    if ( lc($config_info->{'Rakudo setup'}) =~ m/^ parrot/x ) {
        # get parrot before rakudo
        print 'Downloading Parrot...';
        my $command = 'svn checkout https://svn.parrot.org/parrot/trunk '
                      . $parrot_dir
                      . $silently;
        system( $command ) == 0 or die "\nCouldn't check out Parrot: $?";
        print "downloaded\n";
    }
    else {
        # get rakudo before parrot
        print 'Downloading Perl 6...';
        if ( $rakudo_dir =~ m{ (.*) / \w+ $}x && -d $1 ) {
            my $parent_dir = $1;
            my $command = "mkdir -p $parent_dir && cd $parent_dir && "
                          . 'rm -rf rakudo && '
                          . 'git clone git://github.com/rakudo/rakudo.git'
                          . $silently;
            system( $command ) == 0 or die "\nCouldn't check out Rakudo: $?";
            print "downloaded\n";
        }
        else {
            die 'If you want to download Parrot within Rakudo, you need to'
                . "\nspecify 'Rakudo directory' in the config file.\n";
        }
        print 'Downloading Parrot...';
        # invoke Rakudo's parrot autobuilder
        my $command = "cd " . $rakudo_dir .
                      " && perl Configure.pl --gen-parrot $silently";
        system( $command ) == 0
            or die "\nCouldn't configure Rakudo to fetch Parrot: $?";
        print "downloaded\n";
    }
}

# 4. Parrot executable
if ( !-x "$parrot_dir/parrot" ) {
    print 'Building parrot...';
    my $command = "(cd $parrot_dir && perl Configure.pl && make) $silently";
    system( $command ) == 0 or die "\nCouldn't build Parrot: $?";
    if ( !-x "$parrot_dir/parrot" ) {
        die "\nCouldn't build Parrot.";
    }
    print "built\n";
}

# 5. Rakudo download (according to Rakudo-in-Parrot)
if ( !defined $rakudo_dir ) {
    $rakudo_dir
        = $config_info->{'Rakudo directory'} = "$parrot_dir/languages/rakudo";
    DumpFile($config_file, $config_info)
        or die "Couldn't create $config_file: $!\n";
}
if ( !-d $rakudo_dir ) {
    print 'Downloading Perl 6...';
    my $command = "cd $parrot_dir/languages && "
                  . "git clone git://github.com/rakudo/rakudo.git $silently";
    system( $command ) == 0 or die "\nCouldn't download Perl 6: $?";
    print "downloaded\n";
}

# 6. perl6.pbc
if ( !-f "$rakudo_dir/perl6.pbc" ) {
    print 'Building Perl 6...';
    my $command = "(cd $rakudo_dir && perl Configure.pl && make) $silently";
    system( $command ) == 0 or die "\nCouldn't build Perl 6: $?";
    if ( !-f "$rakudo_dir/perl6.pbc" ) {
        die "\nCouldn't build Perl 6.\n";
    }
    print "built\n";
}

# Delegate to installer
my $perl6 = "$parrot_dir/parrot $rakudo_dir/perl6.pbc";
exec( "$perl6 installer @ARGV" );

sub parrot_version {
    my ($parrot_dir) = @_;

    my $parrot_readme = "$parrot_dir/README";
    if ( -f $parrot_readme ) {
        open my $handle, '<', $parrot_readme or return;
        if ( defined( my $line = <$handle> ) ) {
            if ( $line =~ /^This is Parrot, version ([0-9.]+)/ ) {
                return $1;
            }
        }
    }
    return;
}

sub create_default_config_file {
    my ($file_name) = @_;

    my $parrot_dir = $ENV{'PARROT_DIR'};
    my $rakudo_dir = $ENV{'RAKUDO_DIR'};
    my $pwd = `pwd`;
    chomp $pwd;

    my $config_info = {
        'Proto projects directory' => "$pwd/projects",
    };

    if ( !defined $parrot_dir && defined $rakudo_dir ) {
        # derive the parrot_dir from rakudo_dir: there are only 2 possibilities
        if ( $rakudo_dir =~ m{(.*)/languages/rakudo$} ) {
            # Parrot contains Rakudo
            $parrot_dir = $1;
            $config_info->{'Rakudo setup'} = 'Parrot outermost';
        }
        else {
            # rakudo contains parrot
            $parrot_dir = $rakudo_dir . '/parrot';
            $config_info->{'Rakudo setup'} = 'Rakudo outermost';
        }
    }
    if ( !defined $parrot_dir ) {
        $parrot_dir = "$pwd/projects/parrot";
    }
    if ( !defined $rakudo_dir ) {
        # the classic rakudo location inside the parrot nest
        $rakudo_dir = "$parrot_dir/languages/rakudo";
        $config_info->{'Rakudo setup'} = 'Parrot outermost';
    }

    $config_info->{'Parrot directory'} = $parrot_dir;
    $config_info->{'Rakudo directory'} = $rakudo_dir;

    DumpFile($file_name, $config_info)
        or die "Couldn't create $file_name: $!\n";
}

=pod

=head1 NAME

proto.perl5 - downloader and builder for Parrot and Rakudo

=head1 ENVIRONMENT

PARROT_DIR - if exported by the shell, specifies where to look for an installed
Parrot directory.

RAKUDO_DIR - if exported by the shell, specifies where to look for an installed
Rakudo directory.

If both variables are defined, the directories must be nested as either
parrot/languages/rakudo or rakudo/parrot.

=cut
