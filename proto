#!/bin/bash

# This bootstrapping script assumes as little as possible about the user's
# setup. It tries to establish, one after another, the following things:
#
# 1. That perl and git are installed
# 2. That $PARROT_DIR is set.
# 3. That $PARROT_DIR points to a directory containing Parrot.
# 4. That it contains a 'parrot' executable.
# 5. That the $PARROT_DIR/languages/rakudo directory exists.
# 6. That it contains a 'perl6.pbc' file.

# 1. Check perl and git
if command -v perl >/dev/null 2>&1; then
    echo -n
else
    echo "Cannot find 'perl'. You need to install that first."
    echo "Go to http://www.perl.org/get.html and follow the instructions there."
    # TODO: Maybe autodetect various packaging systems that can download perl
    # candidates : http://en.wikipedia.org/wiki/Package_management_system
    # *BSD: ports 
    # OS X: fink / Macports
    # Fedora / RedHat : yum / rpm
    # Gentoo : Portage / emerge
    # Solaris: IPS
    # Ubuntu / Debian : dpkg / apt-get
    # Windows : cygwin
    exit 1;
fi

# NB: No need to check for git until bleeding-edge Rakudo is used. See below.

# if command -v git >/dev/null 2>&1; then
#     echo -n
# else
#     echo "Cannot find 'git'. You need to install that first."
#     echo "Go to http://git-scm.com/download and follow the instructions there."
#     exit 1;
# fi

# TODO: Figure out a way to find the latest release of Parrot, instead
#       of hardcoding it here.
VERSION='0.9.0'

# 2. Check $PARROT_DIR
# 3. Check that it's a Parrot dir
if test -z $PARROT_DIR -a -d parrot-$VERSION; then
    PARROT_DIR=`pwd`/parrot-$VERSION
fi

if [[ -z $PARROT_DIR ||
      !(-e $PARROT_DIR/README) ||
      $(head -n1 $PARROT_DIR/README) != 'This is Parrot'* ]]; then
    echo -n "Downloading Parrot... ";
    FTP_PATH="ftp.parrot.org/pub/parrot/releases/devel/$VERSION"
    TARFILE="parrot-$VERSION.tar.gz"
    wget ftp://$FTP_PATH/$TARFILE > download.log 2>&1
    # TODO: offer a git clone command option to get latest revision
    if (($? != 0)); then
        echo ''
        echo "The download failed. See download.log for details."
        exit 1;
    fi
    tar xzvf $TARFILE            >> download.log 2>&1
    echo ''
    if (($? != 0)); then
        echo "The download failed. See download.log for details."
        exit 1;
    fi
    DIRNAME=`basename $TARFILE .tar.gz`
    if test ! -d $DIRNAME; then
        echo "Download failed. See download.log for details."
        exit 1;
    fi
    export PARROT_DIR=`pwd`/$DIRNAME
    # TODO: Refine evil modification-without asking of .bash_profile
    # particularly do not cause multiple PARROT_DIR lines to be appended
    cat >> ~/.bash_profile <<EOF
export PARROT_DIR=`pwd`/$DIRNAME
EOF
    rm -f $TARFILE download.log
fi

# 4. Check whether it contains a Parrot executable
if test ! -e $PARROT_DIR/parrot; then
    echo -n "Building Parrot... "
    cd $PARROT_DIR
    if test -e Makefile; then
        make realclean > make.log 2>&1 
    fi
    perl Makefile.PL  >> make.log 2>&1
    make              >> make.log 2>&1
    echo ''
    if (($? != 0)); then
        echo "Build failed. See make.log for details."
        exit 1;
    fi
    if test ! -e parrot; then
        echo "Build failed. See make.log for details."
        exit 1;
    fi
    rm -f make.log
    cd - > /dev/null
fi

# TODO: allow for the scenario coming soon where RAKUDO_DIR is outside
# the PARROT_DIR tree, as pmichaud++ has mentioned in #perl6.

# NB: Commenting out the following two steps temporarily: when we use the
#     0.9.0 release of Parrot, we cannot use git Rakudo, because of recent
#     API changes. Later, I'll add an option to use bleeding-edge Parrot
#     and Rakudo.
# # 5. Check whether the languages/rakudo dir exists
# if [[ !(-d $PARROT_DIR/languages/rakudo) ]]; then
#     echo -n "Downloading Perl 6... "
#     cd $PARROT_DIR/languages
#     git clone git://github.com/rakudo/rakudo.git >> download.log 2>&1
#     echo ''
#     if (($? != 0)); then
#         echo "The download failed. See download.log for details."
#         exit 1;
#     fi
#     if [[ !(-d $PARROT_DIR/languages/rakudo) ]]; then
#         echo "Download failed. See download.log for details."
#         exit 1;
#     fi
#     rm -f download.log
#     cd - > /dev/null
# fi
# 
# # 6. Check whether it contains a 'perl6.pbc' file
# if [[ !(-e $PARROT_DIR/languages/rakudo/perl6.pbc) ]]; then
#     echo -n "Building Perl 6... "
#     cd $PARROT_DIR/languages/rakudo
#     echo -n > make.log
#     if [[ -e Makefile ]]; then
#         make realclean >> make.log 2>&1
#     fi
#     perl Configure.pl  >> make.log 2>&1
#     make               >> make.log 2>&1
#     echo ''
#     if (($? != 0)); then
#         echo "Build failed. See make.log for details."
#         exit 1;
#     fi
#     if [[ !(-e perl6.pbc) ]]; then
#         echo "Build failed. See make.log for details."
#         exit 1;
#     fi
#     rm -f make.log
#     cd - > /dev/null
# fi

if test ! -e $PARROT_DIR/languages/perl6/perl6.pbc; then
    echo -n "Building Perl 6... "
    cd $PARROT_DIR/languages/perl6
    echo -n > make.log
    make               >> make.log 2>&1
    echo ''
    if (($? != 0)); then
        echo "Build failed. See make.log for details."
        exit 1;
    fi
    if test ! -e perl6.pbc; then
        echo "Build failed. See make.log for details."
        exit 1;
    fi
    rm -f make.log
    cd - > /dev/null
    # Yes, this is indeed very much cheating. But it works.
    ln -s $PARROT_DIR/languages/perl6 $PARROT_DIR/languages/rakudo
fi

PERL6="$PARROT_DIR/parrot $PARROT_DIR/languages/perl6/perl6.pbc"

$PERL6 -e 'say "Perl 6 is installed."' > /dev/null
if (($? != 0)); then
    echo "Something is wrong with Perl 6. Cannot continue."
    exit 1;
fi

# Delegate to installer
$PERL6 installer $*
