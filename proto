#!/usr/bin/perl -w
use strict;

my $config_file = 'config.proto';
if ( !-e $config_file ) {
    create_default_config_file($config_file);
    die <<"EOMESSAGE";

*** CONFIG FILE CREATED ***

Greetings. I have created a file '$config_file' that you may want to review.
Next time you run '$0', these settings will be used to bootstrap your
system into a working Perl 6 installation.

If you're new to this, or if configure settings scare you, you probably want
the default settings anyway.

EOMESSAGE
}
if ( !-r $config_file ) {
    die "The file $config_file exists but is not readable. Cannot continue.\n";
}
my ( $config_info, $commentinfo ) = LoadFile($config_file);

# This bootstrapping script assumes as little as possible about the user's
# setup. It tries to establish, one after another, the following things:
#
# 1. That perl and git are installed
# 2. That $PARROT_DIR is set.
# 3. That $PARROT_DIR points to a directory containing Parrot.
# 4. That it contains a 'parrot' executable.
# 5. That the $RAKUDO_DIR directory exists.
# 6. That it contains a 'perl6.pbc' file.

use strict;
$| = 1; # flush after every print

# 1. perl git and subversion installed
my $git_version = qx{git --version};
my $svn_version = qx{svn --version};

# TODO: detect if either of these is missing, and install them.
$git_version =~ s/(git )version ([0-9.]+)\n/$1$2/;    # little re-format
$svn_version =~ s/^svn.*?([0-9.]+).*/subversion $1/s;   # huge re-format

# 2. PARROT_DIR
defined (my $parrot_dir = $config_info->{'Parrot directory'})
    or die "Can't proceed if the Parrot directory is not set.";

my $silently = ' > /dev/null 2>&1';

# 3. Parrot download
my $parrot_version;
my $rakudo_dir = $config_info->{'Rakudo directory'};
while ( !($parrot_version = parrot_version($parrot_dir)) )
{
    if ( lc($config_info->{'Rakudo setup'}) =~ m/^ parrot/x ) {
        # get parrot before rakudo
        print 'Downloading Parrot...';
        my $command = 'svn checkout https://svn.parrot.org/parrot/trunk '
                      . $parrot_dir
                      . $silently;
        system( $command ) == 0 or die "\nCouldn't check out Parrot: $?";
        print "downloaded\n";
    }
    else {
        # get rakudo before parrot
        print 'Downloading Perl 6...';
        if ( $rakudo_dir =~ m{ (.*) / \w+ $}x && -d $1 ) {
            my $parent_dir = $1;
            my $command = "mkdir -p $parent_dir && cd $parent_dir && "
                          . 'rm -rf rakudo && '
                          . 'git clone git://github.com/rakudo/rakudo.git'
                          . $silently;
            system( $command ) == 0 or die "\nCouldn't check out Rakudo: $?";
            print "downloaded\n";
        }
        else {
            die 'If you want to download Parrot within Rakudo, you need to'
                . "\nspecify 'Rakudo directory' in the config file.\n";
        }
        print 'Downloading Parrot...';
        # invoke Rakudo's parrot autobuilder
        my $command = "cd " . $rakudo_dir .
                      " && perl Configure.pl --gen-parrot $silently";
        system( $command ) == 0
            or die "\nCouldn't configure Rakudo to fetch Parrot: $?";
        print "downloaded\n";
    }
}

# 4. Parrot executable
if ( !-x "$parrot_dir/parrot" ) {
    print 'Building parrot...';
    my $command = "(cd $parrot_dir && perl Configure.pl && make) $silently";
    system( $command ) == 0 or die "\nCouldn't build Parrot: $?";
    if ( !-x "$parrot_dir/parrot" ) {
        die "\nCouldn't build Parrot.";
    }
    print "built\n";
}

# 5. Rakudo download (according to Rakudo-in-Parrot)
if ( !defined $rakudo_dir ) {
    $rakudo_dir
        = $config_info->{'Rakudo directory'} = "$parrot_dir/languages/rakudo";
    DumpFile($config_file, $config_info, $commentinfo )
        or die "Couldn't create $config_file: $!\n";
}
if ( !-d $rakudo_dir ) {
    print 'Downloading Perl 6...';
    my $command = "cd $parrot_dir/languages && "
                  . "git clone git://github.com/rakudo/rakudo.git $silently";
    system( $command ) == 0 or die "\nCouldn't download Perl 6: $?";
    print "downloaded\n";
}

# 6. perl6.pbc
if ( !-f "$rakudo_dir/perl6.pbc" ) {
    print 'Building Perl 6...';
    my $command = "(cd $rakudo_dir && perl Configure.pl && make) $silently";
    system( $command ) == 0 or die "\nCouldn't build Perl 6: $?";
    if ( !-f "$rakudo_dir/perl6.pbc" ) {
        die "\nCouldn't build Perl 6.\n";
    }
    print "built\n";
}

# Delegate to installer
my $perl6 = "$parrot_dir/parrot $rakudo_dir/perl6.pbc"; # old faithful
# my $perl6 = "$rakudo_dir/perl6";    # new hopefully stable fakexecutable
exec( "$perl6 installer @ARGV" );

sub parrot_version {
    my ($parrot_dir) = @_;

    my $parrot_readme = "$parrot_dir/README";
    if ( -f $parrot_readme ) {
        open my $handle, '<', $parrot_readme or return;
        if ( defined( my $line = <$handle> ) ) {
            if ( $line =~ /^This is Parrot, version ([0-9.]+)/ ) {
                return $1;
            }
        }
    }
    return;
}

sub create_default_config_file {
    my ($file_name) = @_;

    my  $commentinfo = {
        '/' => [ 'config.proto -- created by proto',
                 'The file consists of a number of settings written as',
                 'key/value pairs. You are welcome -- encouraged, even -- to',
                 'edit the file manually, but please stick to a list of',
                 'key/value pairs.' ],
        'config.proto version'
            => [ 'config.proto version -- the version number of this file.',
                 'proto uses it to determine whether the file needs to be',
                 'upgraded to a newer version. The value should never need',
                 'to be edited manually.' ],
        'Proto projects directory'
            => [ 'Proto projects directory -- the path to a directory, which',
                 'may or may not exist, which will contain the projects',
                 'downloaded by proto, including (if needed) Parrot and',
                 'Perl 6. If you set this to a different path after projects',
                 'have already been installed, be aware that the old projects',
                 'will have to be moved along if proto is to find them' ],
        'Parrot directory'
            => [ 'Parrot directory -- the path to the directory, which may',
                 'or may not exist, where Parrot lives or will be installed.'
               ],
        'Parrot revision'
            => [ 'Parrot revision -- the revision of Parrot to download, if',
                 'no Parrot was found in $PARROT_DIR at startup. Allowed',
                 'values are "release", "bleeding", and an integer (optionally',
                 'preceded by the letter "r"). The value "bleeding" means to',
                 'download the latest Parrot revision from SVN, whereas',
                 '"release" means to download the latest release as a',
                 'tarball.' ],
        'Rakudo directory'
            => [ 'Rakudo directory -- the path to the directory, which may',
                 'or may not exist, where Rakudo lives or will be installed.'
               ],
        'Rakudo revision'
            => [ 'Rakudo revision -- the revision of Rakudo Perl 6 to',
                 'download, if no such revision was found in $RAKUDO_DIR or',
                 'other likely locations at startup. Allowed values are',
                 '"release", "bleeding", and a hexadecimal integer of length',
                 'up to 40. The value "bleeding" means to download the latest',
                 'Rakudo Perl 6 revision from github, whereas "release" means',
                 'to download the latest release as a tarball.' ],
        'Rakudo setup'
            => [ 'Rakudo setup -- there are two ways to install Rakudo Perl 6',
                 'nowadays: either with Parrot outermost and Rakudo inside,',
                 'or the other way around. The former way is the traditional',
                 'way, used before Rakudo left the Parrot nest; the latter is',
                 'targetted for Rakudo users who plan to use Parrot mostly to',
                 'run Perl 6. Any value of this option that starts with',
                 '"Parrot" (case insensitive) will be treated as "Parrot',
                 'outermost" -- all others will be treated as "Rakudo',
                 'outermost." Depending on the value of this setting, one of',
                 'the settings "Rakudo directory" and "Parrot directory" may',
                 'be ignored if it conflicts with the constraints of the',
                 'relative paths of Parrot and Rakudo.' ],
        'Test when building'
            => [ 'Test when building -- when building projects that were just',
                 'downloaded or updated, whether to also run the test suites',
                 'of those projects. This option only controls whether the',
                 'tests are actually run; the "Test failure policy"',
                 'determines whether or not to halt the build process on',
                 'a failing test suite. Values other than "yes" are treated',
                 'as "no".' ],
        'Test failure policy'
            => [ 'Test failure policy -- what to do when tests fail in the',
                 'test suites of projects that are being installed. Note that',
                 'this option has no effect unless the option "Test when',
                 'building" has been set to "yes". The value "die" of this',
                 'option means that the build process halts whenever a test',
                 'suite fails. Other values are treated as "keep going".' ],
        'Perl 6 project developer'
            => [ 'Perl 6 project developer -- when set, this option makes',
                 'proto try to download read-write versions of project',
                 'repositories, from which project development can be',
                 'carried out. If such a download fails, proto falls back to',
                 'downloading the project the usual way.' ],
    };
    my $parrot_dir = $ENV{'PARROT_DIR'};
    my $rakudo_dir = $ENV{'RAKUDO_DIR'};
    my $pwd = `pwd`;
    chomp $pwd;

    my $config_info = {
        'config.proto version' => '2009-02-28',
        'Proto projects directory' => "$pwd/projects",
        # TODO: These two should be set to 'release' by default
        'Parrot revision' => 'bleeding',
        'Rakudo revision' => 'bleeding',
        'Test when building' => 'no',
        'Test failure policy' => 'die',
        'Perl 6 project developer' => 'no',
    };

    if ( !defined $parrot_dir && defined $rakudo_dir ) {
        # derive the parrot_dir from rakudo_dir: there are only 2 possibilities
        if ( $rakudo_dir =~ m{(.*)/languages/rakudo$} ) {
            # Parrot contains Rakudo
            $parrot_dir = $1;
            $config_info->{'Rakudo setup'} = 'Parrot outermost';
        }
        else {
            # rakudo contains parrot
            $parrot_dir = $rakudo_dir . '/parrot';
            $config_info->{'Rakudo setup'} = 'Rakudo outermost';
        }
    }
    if ( !defined $parrot_dir ) {
        $parrot_dir = "$pwd/projects/parrot";
    }
    if ( !defined $rakudo_dir ) {
        # the classic rakudo location inside the parrot nest
        $rakudo_dir = "$parrot_dir/languages/rakudo";
        $config_info->{'Rakudo setup'} = 'Parrot outermost';
    }

    $config_info->{'Parrot directory'} = $parrot_dir;
    $config_info->{'Rakudo directory'} = $rakudo_dir;

    DumpFile($file_name, $config_info, $commentinfo )
        or die "Couldn't create $file_name: $!\n";
}

sub LoadFile {
    my $filename = shift;
    my $settings = { };
    my $comments = { };
    my @comments = ( );
    open my $YAML_FILE, '<', $filename
        or die "cannot open $filename for read: $!";
    my $doc_sep_line = qr/^---/;
    my $comment_line = qr/\#(.*)$/;
    my $setting_line = qr/(.*):\s+(.*)/;
    while ( my $line = <$YAML_FILE> ) {
        chomp $line;
        if ( $line =~ $doc_sep_line ) {
            $comments->{'#'} = [ @comments ];
            @comments        = ( );
        }
        elsif ( $line =~ $comment_line ) {
            push @comments, $1;
        }
        elsif ( $line =~ $setting_line ) {
            $settings->{$1} = $2;
            $comments->{$1} = [ @comments ];
            @comments       = ( );
        }
    }
    close $YAML_FILE;
    return wantarray ? ( $settings, $comments ) : $settings;
}

sub DumpFile {
    my ( $filename, $settings, $comments ) = @_;
    if ( not defined $comments ) { $comments = { }; }
    open my $YAML_FILE, '>', $filename
        or die "cannot open $filename for write: $!";
    my $main_comments = $comments->{'/'};
    if ( defined $main_comments ) {
        for my $comment ( @$main_comments ) {
            print {$YAML_FILE} "# $comment\n";
        }
    }
    print {$YAML_FILE} "--- \n";
    for my $settingname ( sort keys %$settings ) {
        my $setting_comments = $comments->{$settingname};
        if ( defined $setting_comments ) {
            for my $comment ( @$setting_comments ) {
                print {$YAML_FILE} "# $comment\n";
             }
        }
        print {$YAML_FILE} "$settingname: ", ${$settings}{$settingname}, "\n";
    }
    close $YAML_FILE;
}

=pod

=head1 NAME

proto.perl5 - downloader and builder for Parrot and Rakudo

=head1 ENVIRONMENT

PARROT_DIR - if exported by the shell, specifies where to look for an installed
Parrot directory.

RAKUDO_DIR - if exported by the shell, specifies where to look for an installed
Rakudo directory.

If both variables are defined, the directories must be nested as either
parrot/languages/rakudo or rakudo/parrot.

=cut
