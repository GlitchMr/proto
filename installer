#!perl6
use v6;

        #installcmd  => 'git clone git://github.com/viklund/november.git',
        #installcmd  => 'svn co https://rakudo-prelude.googlecode.com/svn/trunk',
my %project_info =
    november => { :home<github>, :owner<viklund>, },
    druid => { :home<github>, :owner<masak>, },
    perl6-examples => { :home<github>, :owner<eric256> },
    uri => { :home<github>, :owner<ihrd> },
    web => { :home<github>, :owner<masak> },
    rakudo-prelude => { :home<googlecode> },
;

given @*ARGS.shift {
    when undef       { exit; }
    when 'install'   { install(  @*ARGS) }
    when 'test'      { test(     @*ARGS) }
    when 'update'    { update(   @*ARGS) }
    when 'uninstall' { uninstall(@*ARGS) }
    when 'showdeps'  { showdeps( @*ARGS) }
    default          { say "Unrecognized subcommand '$_'. See the README." }
}

sub install(*@projects) {
    unless @projects {
        say 'You have to specify what you want to install.';
        exit 1;
    }
    my $can_continue = True;
    for @projects -> $project {
        if !%project_info.exists($project) {
            say "Project not found: '$project'";
            $can_continue = False;
        }
    }
    if !$can_continue {
        say "Aborting...";
        exit(1);
    }
    for @projects -> $project {
        my %info = %project_info{$project};
        print "Downloading $project... ";
        my $installcmd = %info<home> eq 'github'
                         ?? sprintf 'git clone git://github.com/%s/%s.git %s',
                                    %info<owner>,
                                    %info<name> // $project,
                                    $project
                         !! %info<home> eq 'googlecode'
                         ?? sprintf
                              'svn co https://%s.googlecode.com/svn/trunk %s',
                              %info<name> // $project,
                              $project
                         !! die "Unknown home type {%info<home>}";
        run( "$installcmd > download.log 2>&1" );
        say '';
        unlink( 'download.log' );
        # RAKUDO: This can be cleaned up when the backtick syntax lands
        run( 'pwd > current_dir' );
        my $current_dir = slurp('current_dir');
        $current_dir .= subst( /\v+$/, '' );
        unlink( 'current_dir' );
        run( 'rm -f current_dir' );
        # RAKUDO: Doesn't support any other way to change the current working
        #         directory. Improvising.
        my $project_dir = %info.exists('main_subdir')
                          ?? "$project/{%info<main_subdir>}"
                          !! $project;
        my $in_dir = "cd $project_dir";
        # RAKUDO: Can't really figure out how to set environment variables
        #         so they're visible by later commands. Doing like this
        #         instead.
        my $p6l = "env PERL6LIB=$current_dir/$project_dir/lib";
        print "Building $project... ";
        run( "$in_dir; yes '' | $p6l perl Makefile.PL > make.log 2>\&1" );
        run( "$in_dir; $p6l make >> make.log 2>\&1" );
        say '';
        unlink( "$project_dir/make.log" );
    }
}

sub test(*@projects) {
    unless @projects {
        say 'You have to specify what you want to test.';
        # TODO: Maybe just test everything installed?
        exit 1;
    }
    my $can_continue = True;
    for @projects -> $project {
        if !%project_info.exists($project) {
            say "Project not found: '$project'";
            $can_continue = False;
        }
        # TODO: Also need to check that projects are actually installed.
    }
    if !$can_continue {
        say "Aborting...";
        exit(1);
    }
    for @projects -> $project {
        my %info = %project_info{$project};
        # RAKUDO: This can be cleaned up when the backtick syntax lands
        run( 'pwd > current_dir' );
        my $current_dir = slurp('current_dir');
        $current_dir .= subst( /\v+$/, '' );
        unlink( 'current_dir' );
        # RAKUDO: Doesn't support any other way to change the current working
        #         directory. Improvising.
        my $project_dir = %info.exists('main_subdir')
                          ?? "$project/{%info<main_subdir>}"
                          !! $project;
        my $in_dir = "cd $project_dir";
        # RAKUDO: Can't really figure out how to set environment variables
        #         so they're visible by later commands. Doing like this
        #         instead.
        my $p6l = "env PERL6LIB=$current_dir/$project_dir/lib";
        print "Building $project... ";
        run( "$in_dir; $p6l make test" );
    }

}

sub update(*@projects) {
    not_implemented('update');
}

sub uninstall(*@projects) {
    not_implemented('uninstall');
}

sub showdeps(*@projects) {
    unless @projects {
        say "You have to specify which projects' dependencies to show.";
        exit 1;
    }
    for @projects -> $project {
        if $project !~~ :d {
            say "$project is not installed.";
            next;
        }
        my $deps_file = $project~'/deps.proto';
        if $deps_file !~~ :e {
            say "$project has no dependencies.";
            next;
        }
        my &remove_line_ending_comment = { .subst(/ '#' .* $ /, '') };
        my &line_is_nonempty = { $^line !~~ / ^ \s* $ / };
        my @deps = slurp($deps_file)\
                     .split("\n")\
                     .map({remove_line_ending_comment($^line)})\
                     .grep({line_is_nonempty($^line)});
        if !@deps {
            say "$project has no dependencies.";
            next;
        }
        say $project, ':';
        for @deps -> $dep {
            say '  ', $dep;
        }
    }
}

sub not_implemented($subcommand) {
    warn "The '$subcommand' subcommand is not implemented yet.";
}
