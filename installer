#!perl6
use v6;

my %project_info =
    november => {
        installcmd  => 'git clone git://github.com/viklund/november.git',
        main_subdir => 'p6w',
    },
    druid => {
        installcmd => 'git clone git://github.com/masak/druid.git',
    },
    # TODO: add perl6-examples
    # TODO: add web
;

given @*ARGS.shift {
    when undef       { exit; }
    when 'install'   { install(@*ARGS) }
    when 'upgrade'   { upgrade(@*ARGS) }
    when 'uninstall' { uninstall(@*ARGS) }
    default          { say "Unrecognized subcommand '$_'. See the README." }
}

sub install(*@projects) {
    unless @projects {
        say 'You have to specify what you want to install.';
        exit 1;
    }
    my $can_continue = True;
    for @projects -> $project {
        if !%project_info.exists($project) {
            say "Project not found: '$project'";
            $can_continue = False;
        }
    }
    if !$can_continue {
        say "Aborting...";
        exit(1);
    }
    for @projects -> $project {
        my %info = %project_info{$project};
        print "Downloading $project... ";
        run( %info<installcmd> ~ ' > download.log 2>&1' );
        say '';
        run( 'rm -f download.log' );
        # RAKUDO: This can be cleaned up when the backtick syntax lands
        run( 'pwd > current_dir' );
        my $current_dir = slurp('current_dir');
        $current_dir .= subst( /\v+$/, '' );
        run( 'rm -f current_dir' );
        # RAKUDO: Doesn't support any other way to change the current working
        #         directory. Improvising.
        my $project_dir = %info.exists('main_subdir')
                          ?? "$project/{%info<main_subdir>}"
                          !! $project;
        my $in_dir = "cd $project_dir";
        # RAKUDO: Can't really figure out how to set environment variables
        #         so they're visible by later commands. Doing like this
        #         instead.
        my $p6l = "env PERL6LIB=$current_dir/$project_dir/lib";
        print "Building $project... ";
        run( "$in_dir; yes '' | $p6l perl Makefile.PL > make.log 2>\&1" );
        run( "$in_dir; $p6l make >> make.log 2>\&1" );
        say '';
        run( "$in_dir; rm -f make.log" );
    }
}

sub upgrade(*@projects) {
    say "The 'upgrade' subcommand is not implemented yet.";
}

sub uninstall(*@projects) {
    say "The 'uninstall' subcommand is not implemented yet.";
}
